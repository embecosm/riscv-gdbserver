2017-08-09  Andrew Burgess  <andrew.burgess@embecosm.com>

	* server/GdbServer.cpp (GdbServer::GdbServer): Add new parameter,
	initialise member variable.
	(GdbServer::rspClientRequest): Modify handling of kill packet.
	* server/GdbServer.h (GdbServer::KillBehaviour): New enum.
	(GdbServer::GdbServer): Add new parameter.
	(GdbServer::killBehaviour): New member variable.
	* server/main.cpp (main): Pass suitable GdbServer::KillBehaviour
	value to new GdbServer object.

2017-08-09  Andrew Burgess  <andrew.burgess@embecosm.com>

	* server/main.cpp (main): Delete connection.

2017-08-04  Andrew Burgess  <andrew.burgess@embecosm.com>

	* server/AbstractConnection.cpp: New file.
	* server/AbstractConnection.h: New file.
	* server/GdbServer.cpp (GdbServer::GdbServer): Takes connection
	object instead of port number.
	* server/GdbServer.h (GdbServer::GdbServer): Takes connection
	object instead of port number.
	(GdbServer::rsp): Is now an AbstractConnection.
	* server/Makefile.am (riscv_gdbserver_SOURCES): Add new files.
	* server/Makefile.in: Regenerate.
	* server/RspConnection.cpp (RspConnection::RspConnection): Update
	initialisation list.
	(RspConnection::getPkt): Move to AbstractConnection.cpp.
	(RspConnection::putPkt): Likewise.
	(RspConnection::putRspChar): Likewise.
	(RspConnection::getRspChar): Likewise.
	(RspConnection::haveBreak): Likewise.
	* server/RspConnection.h: Add include.
	(class RspConnection): Add parent class.
	(getPkt): Moved to AbstractConnection.h.
	(putPkt): Likewise.
	(haveBreak): Likewise.
	(BREAK_CHAR): Likewise.
	(traceFlags): Likewise.
	(mHavePendingBreak): Likewise.
	(mGetCharBuf): Likewise.
	(mNumGetBufChars): Likewise.
	(putRspChar): Likewise.
	(getRspChar): Likewise.
	(putRspCharRaw): Mark as virtual.
	(getRspCharRaw): Likewise.
	* server/StreamConnection.cpp: New file.
	* server/StreamConnection.h: New file.
	* server/main.cpp: New includes.
	(usage): Add new options.
	(main): Handle new --stdin/s option, create a connection object of
	the correct type, and pass this to gdbserver.

2017-08-04  Andrew Burgess  <andrew.burgess@embecosm.com>

	* server/main.cpp (main): Check for null coreName.

2017-07-12  Jeremy Bennett  <jeremy.bennett@embecosm.com>

	* server/GdbServer.cpp: Add stdexcept header.

2017-07-12  Jeremy Bennett  <jeremy.bennett@embecosm.com>

	* server/GdbServer.cpp (GdbServer::rspSetCommand): Make catch
	friendlier to old compilers.

2017-07-12  Jeremy Bennett  <jeremy.bennett@embecosm.com>

	Prior to GCC 5.0 std::put_time is not supported.

	* server/GdbServer.cpp: Remove using for std::put_time.
	(GdbServer::rspCommand): Rewrite timestamp to not use put_time.

2017-07-10  Jeremy Bennett  <jeremy.bennett@embecosm.com>

	* server/RspConnection.cpp (RspConnection::RspConnection):
	Initialize mHavePendingBreak.
	* targets/ri5cy/Ri5cyImpl.cpp: Add using declaration for std::cerr
	and std::endl.

2017-07-06  Jeremy Bennett  <jeremy.bennett@embecosm.com>

	* targets/picorv32/Picorv32.cpp (Picorv32::getCycleCount)
	(Picorv32::getInstrCount): Call corresponding method in
	mPicorv32Impl.
	* targets/picorv32/Picorv32Impl.cpp (Picorv32Impl::Picorv32Impl):
	Initialize mInstr.
	(Picorv32Impl::getCycleCount, Picorv32Impl::getInstrCount):
	Created.
	* targets/picorv32/Picorv32Impl.h (class Picorv32Impl): Add
	getCycleCount and getInstrCount.

2017-07-06  Jeremy Bennett  <jeremy.bennett@embecosm.com>

	* server/GdbServer.cpp: Include ctime, provide using for
	std::localtime and std::put_time.
	(GdbServer::rspClientRequest): Remove redundant std::chrono.
	(GdbServer::rspCommand): Fix some alignment issues, add OK
	responses for several commands, implement timestamp.

2017-07-05  Jeremy Bennett  <jeremy.bennett@embecosm.com>

	* server/GdbServer.cpp (GdbServer::rspCommand): Add missing
	monitor commands.
	(GdbServer::rspSetCommand): Created.
	(GdbServer::rspShowCommand): Created.
	* server/GdbServer.h (class GdbServer): Add rspSetCommand and
	rspShowCommand methods.
	* server/RspPacket.cpp (RspPacket::packRcmdStr): Created.
	* server/RspPacket.h (class RspPacket): Add packRcmdStr method.
	* server/TraceFlags.cpp (TraceFlags::traceRsp): Add setter.
	(TraceFlags::allFlags): Created setter and getter.
	* server/TraceFlags.h: Add traceRsp setter and allFlags setter and
	getter methods.
	* server/Utils.cpp (Utils::split): Created.
	* server/Utils.h (class Utils): Added split method.

2017-07-04  Jeremy Bennett  <jeremy.bennett@embecosm.com>

	This is a GDB server to work with RI5CY with 128-bit wide
	instruction FIFO. It also fixes a minor glitch with RSP.

	* server/RspConnection.cpp (RspConnection::RspConnection):
	Initialize mNumGetBufChars.
	* targets/ri5cy/Ri5cyImpl.cpp (Ri5cyImpl::stepInstr)
	(Ri5cyImpl::runToBreak): No need to flush the pipeline.

2017-07-04  Jeremy Bennett  <jeremy.bennett@embecosm.com>

	* server/GdbServer.cpp (GdbServer::rspCommand): Add "monitor
	cyclecount".
	* targets/ri5cy/Ri5cyImpl.h: Correct name of DBG_HIT_SSTH from
	DBG_HIT_SSTE.

2017-07-04  Jeremy Bennett  <jeremy.bennett@embecosm.com>

	* targets/ri5cy/Ri5cyImpl.cpp (Ri5cyImpl::stepInstr): Write
	DBG_CTRL after flushing pipeline.
	(Ri5cyImpl::runToBreak): Compute value for DBG_CTRL before
	flushing the pipeline, so can write DBG_CTRL in the next cycle.

2017-07-03  Jeremy Bennett  <jeremy.bennett@embecosm.com>

	* targets/ri5cy/Ri5cyImpl.cpp (Ri5cyImpl::runToBreak): Tried a
	different sequence.

2017-07-03  Jeremy Bennett  <jeremy.bennett@embecosm.com>

	This implementation provides a way to resume continuously, but
	does not yet work with the RI5CY implementation. It seems the
	pipeline does not get fully flushed.

	* server/GdbServer.cpp (GdbServer::rspRemoveMatchpoint)
	(GdbServer::rspInsertMatchpoint): Just return empty packets, so
	GDB does breakpoints by steam.
	* targets/ri5cy/Ri5cyImpl.cpp (Ri5cyImpl::readRegister)
	(Ri5cyImpl::writeRegister): Warn rather than abort if asked for
	unkown registers, this is a GDB problem.
	(Ri5cyImpl::stepInstr): Write NPC first to flush pipeline.
	(Ri5cyImpl::runToBreak): Implementation provided, but does not yet
	work.

2017-07-03  Jeremy Bennett  <jeremy.bennett@embecosm.com>

	* targets/picorv32/Picorv32Impl.cpp: Unify header inclusion.
	* targets/ri5cy/Ri5cyImpl.cpp: Remove std::chrono:: namespace
	qualifiers throughout, covered by using declarations.
	(Ri5cyImpl::resetModel): Set the DBG_IE reg to trap on breakpoint
	and illegal instruction.
	(Ri5cyImpl::haltModel): Rewrite using waitForHalt.
	(Ri5cyImpl::waitForHalt): Created.
	(Ri5cyImpl::stepInstr): Rewritten to write the NPC to flush the
	pipeline.
	* targets/ri5cy/Ri5cyImpl.h (class Ri5cyImple): Add constants for
	DBG_IE fields and waitForHalt method.

2017-07-08  Jeremy Bennett  <jeremy.bennett@embecosm.com>

	* targets/ri5cy/Ri5cyImpl.cpp (Ri5cyImpl::stepInstr): clear
	fetch_enable_i.

2017-06-30  Jeremy Bennett  <jeremy.bennett@embecosm.com>

	* targets/ri5cy/Ri5cyImpl.cpp (Ri5cyImpl::resume): Deal with all
	types of step.
	(Ri5cyImpl::readRegister, Ri5cyImpl::writeRegister): Rewrite to
	use debug register access methods.
	(Ri5cyImpl::read, Ri5cyImpl::write): Access dp_ram, not sp_ram.
	(Ri5cyImpl::clockModel): Created.
	(Ri5cyImpl::resetModel, Ri5cyImpl::haltModel): Rewritten to use
	debug register access methods.
	(Ri5cyImpl::readDebugReg, Ri5cyImpl::writeDebugReg): Created.
	(Ri5cyImpl::stepInstr): Written to use SSTE debug interface and
	handle timeouts.
	* targets/ri5cy/Ri5cyImpl.h (class Ri5cyImpl): Add new debug
	flags, clockModel, readDebugReg, writeDebugReg, add timeout to
	stepInstr.

2017-06-29  Jeremy Bennett  <jeremy.bennett@embecosm.com>

	* server/GdbServer.cpp (GdbServer::rspCommand): Modify the
	horrible hack for exit - still a horrible hack though.
	* server/main.cpp (main): Delete the cpu at the end.
	* targets/ri5cy/Ri5cyImpl.cpp: Fix the headers for the new model.
	(Ri5cyImpl::resume): Mark unused param. Needs to be written properly.
	(Ri5cyImpl::read, Ri5cyImpl::write): Use single ported RAM.
	(Ri5cyImpl::resetModel): Set fetch_enable to 0 on reset.
	(Ri5cyImpl::stepInstr, Ri5cyImpl::runToBreak): Created.
	* targets/ri5cy/Ri5cyImpl.h: Add stepInstr and runToBreak.

2017-06-27  Jeremy Bennett  <jeremy.bennett@embecosm.com>

	This commit syncrhonizes with all the work on the ri5cy_wip branch
	as far as it makes sense.

	* server/main.cpp (main): Tidy up a comment
	* targets/ri5cy/Ri5cyImpl.cpp: Include iostream and more Verilator
	model headers.
	(Ri5cyImpl::resume): Remove unused attributes and add
	implementation.
	(Ri5cyImpl::readRegister): Turn do-while into while loop when
	looking for rvalid.
	(Ri5cyImpl::writeRegister): Add implementation.
	(Ri5cyImpl::read, Ri5cyImpl::write): Add task based
	implementation..

2017-06-27  Jeremy Bennett  <jeremy.bennett@embecosm.com>

	Add VCD generation as an option.

	* server/GdbServer.cpp (GdbServer::rspCommand): Pass argument to
	reset.
	* server/Makefile.am: Add more target libraries.
	* server/Makefile.in: Regenerated.
	* server/TraceFlags.cpp (TraceFlags::traceVcd): Created.
	* server/TraceFlags.h: Add traceVcd method and constant.
	* server/main.cpp: Include Ri5cy.h, make cpu static global.
	(main): Allow RI5CY target.
	(sc_time_stamp): Created.
	* targets/ITarget.h (class ITarget): Add constructor to take
	boolean arg, correct void argument lists, add timeStamp.
	* targets/picorv32/Picorv32.cpp (Picorv32::Picorv32): Pass in
	argument to select VCD.
	(Picorv32::timeStamp): Created.
	* targets/picorv32/Picorv32.h (class Picorv32): Add constructor to take
	boolean arg, correct void argument lists, add timeStamp.
	* targets/picorv32/Picorv32Impl.cpp (Picorv32Impl::Picorv32Impl):
	Initialize VCD.
	(Picorv32Impl::~Picorv32Impl): Close VCD.
	(Picorv32Impl::clockStep, Picorv32Impl::writeProgramAddr):
	Generate VCD when stepping.
	(Picorv32Impl::timeStamp): Created.
	* targets/picorv32/Picorv32Impl.h (class Picorv32Impl): Pass flag
	to constructor, add timeStamp method, add VCD member variables.
	* targets/ri5cy/Makefile.am: Add C include dirs.
	* targets/ri5cy/Makefile.in: Regenerated.
	* targets/ri5cy/Ri5cy.cpp (Ri5cy::Ri5cy): Add constructor to take
	boolean arg, correct void argument lists, add timeStamp.
	(Ri5cy::timeStamp): Creatd.
	* targets/ri5cy/Ri5cy.h (class Ri5cy): Pass arg to constructor,
	add timeStamp.
	* targets/ri5cy/Ri5cyImpl.cpp Include verilcated_vcd_c.h
	(Ri5cyImpl::Ri5cyImpl): Take arg, initialize VCD.
	(Ri5cyImpl::~Ri5cyImpl): Close VCD
	(Ri5cyImpl::resume, Ri5cyImpl::terminate,Ri5cyImpl::reset):
	Correct types.
	(Ri5cyImpl::readRegister): Fix typo, generated VCD.
	(Ri5cyImpl::writeRegister, Ri5cyImpl::read, Ri5cyImpl::write):
	Mark regs unused, return result.
	(Ri5cyImpl::insertMatchpoint, Ri5cyImpl::removeMatchpoint)
	(Ri5cyImpl::command): Mark args unused.
	(Ri5cyImpl::timeStamp): Created.
	(Ri5cyImpl::resetModel, Ri5cyImpl::haltModel): Generate VCD.
	* targets/ri5cy/Ri5cyImpl.h (class Ri5cyImpl): Correct types
	throughout.

2017-06-27  Jeremy Bennett  <jeremy.bennett@embecosm.com>

	Remove compile time debug flag GDBSERVER_DEBUG.

	* Makefile.in: Regenerate.
	* server/GdbServer.cpp (GdbServer::rspRemoveMatchpoint)
	(GdbServer::rspInsertMatchpoint): Report details of matchpoint
	under control of trace flags.
	* server/RspConnection.cpp (RspConnection::rspConnect)
	(RspConnection::rspClose): Likewise.
	* server/TraceFlags.cpp (TraceFlags::traceRsp): Make constant.
	(TraceFlags::traceConn, TraceFlags::traceBreak)
	(TraceFlags::traceSilent, TraceFlags::setSilent): Created.
	* server/TraceFlags.h (class TraceFlags): Make read accessors
	constant, add traceConn, traceBreak, traceSilent and setSilent.
	* server/main.cpp (usage): Add help and silent flags.
	(main): Extend command line flag for silent running.

2017-06-25  Jeremy Bennett  <jeremy.bennett@embecosm.com>

	This will not currently compile, but shows how the interface via
	the debug unit should work.

	* targets/ITarget.h (class ITarget): Add ResetType scoped
	enumeration, allow different types of reset, do not pass
	matchpoint addresses by reference.
	* targets/picorv32/Makefile.am: Add headers to sources, so they
	are included in the distribution.
	* targets/picorv32/Makefile.in: Regenerated.
	* targets/picorv32/Picorv32.cpp (Picorv32::reset): Provide
	argument for reset type
	(Picorv32::insertMatchpoint, Picorv32::removeMatchpoint): Pass
	address by value, not reference.
	* targets/picorv32/Picorv32.h (class Picorv32): Add argument to
	reset and pass address by value to insertMatchpoint and
	removeMatchpoint.
	* targets/picorv32/Picorv32Impl.cpp: Clarify header comment.
	* targets/picorv32/Picorv32Impl.h: Likewise.
	* targets/ri5cy/Makefile.am: Update list of sources.
	* targets/ri5cy/Makefile.in: Regenerated.
	* targets/ri5cy/Ri5cy.cpp: Created.
	* targets/ri5cy/Ri5cy.h: Created.
	* targets/ri5cy/Ri5cyImpl.cpp: Created.
	* targets/ri5cy/Ri5cyImpl.h: Created.

2017-06-25  Jeremy Bennett  <jeremy.bennett@embecosm.com>

	* configure.ac: Make model directories absolute.
	* configure: Regenerated.

2017-06-25  Graham Markall  <graham.markall@embecosm.com>

	* targets/picorv32/Picorv32.cpp: (RUN_SAMPLE_PERIOD) Add.
        (resume) When step is CONTINUE, step for RUN_SAMPLE_PERIOD
        instructions; if timeout expired, return TIMEOUT.
        Otherwise, repeat. Default timeout if none supplied is
        zero, resulting in single-stepping.

2017-06-24  Graham Markall  <graham.markall@embecosm.com>

	Partially-working implementation of Picorv32

	Reading and writing memory and registers works, as does
	single-stepping instructions. Breakpoints are not presently
	working.

        * server/GdbServer.cpp: (RISCV_PC_REGNUM) Remove, as it seems a
	bit specific to Picorv32 (it handles the PC differently to the
	rest of the register file).
        * targets/picorv32/Picorv32.cpp: (RISCV_PC_REGNUM) Add.
        (resume) Implement, but only single-stepping - no mutiple steps
	with timeouts. (terminate) Add comment. (reset)
	Implement. (readRegister, writeRegister) Fix handling of PC, which
	is a special case.

2017-06-24  Graham Markall  <graham.markall@embecosm.com>

	* targets/picorv32/Picorv32.cpp: (readRegister, writeRegister)
	(read, write) Implement.

2017-06-24  Graham Markall  <graham.markall@embecosm.com>

	Although this builds, the Picorv32 implementation is not yet
	functioning because the functions of Picorv32 are not yet
	implemented. Mostly they will be able to call into the
	Picorv32Impl class, but some of the functions will need a little
	more work.

	class should be very similar to the original Cpu class
	implementation, and the Picorv32 class adapts it and implements
	the ITarget interface.

	Some of the choices made here are not completely future-proof;
	when we add a second core (RI5CY) we may have problems with
	linking.

        * Makefile.in: Regenerate.
        * server/Makefile.am: Link with Verilated Picorv32 libraries.
        * server/Makefile.in: Regenerate.
        * targets/picorv32/Makefile.am: Compile Picorv32.cpp and
	Picorv32Impl.cpp. Include target, target/common, and verilated
	Picorv32 folders. Don't warn on unused params.
        * targets/picorv32/Makefile.in: Regenerate.
        * targets/picorv32/Picorv32.cpp: Replace old Cpu implementation
	with stub implementations of all methods of the Picorv32 class.
        * targets/picorv32/Picorv32Impl.cpp: Include Picorv32Impl.h,
	rename Cpu class to Picorv32Impl.
        * targets/picorv32/Picorv32Impl.h: Rename Cpu class to
	Picorv32Impl.

2017-06-16  Jeremy Bennett  <jeremy.bennett@embecosm.com>

	* server/RspConnection.cpp (RspConnection::getRspCharRaw): Correct
	class name.
	* server/main.cpp (usage): Created.
	(main): Extend argument handling.
	* targets/ITarget.h: Correct single use #define.
	* targets/common/SyscallInfo.h: Likewise.
	* targets/picorv32/Picorv32.h (class Picorv32): Make class members
	non-virtual.

2017-06-14  Jeremy Bennett  <jeremy.bennett@embecosm.com>

	WIP in progress on target abstraction.

	* Makefile.in: Regenerated.
	* server/GdbServer.cpp (GdbServer::rspClientRequest): Rewrite
	handling of 's' and 'S' packets.
	(GdbServer::rspReportException): Use static_cast instead of C
	style cast.
	(GdbServer::rspReadAllRegs, GdbServer::rspWriteAllRegs): Do not
	treat program counter as special case and use ITarget methods to
	access registers.
	(GdbServer::rspReadMem): Rewrite to use ITarget read method.
	(GdbServer::rspWriteMem): Rewrite to use ITarget write method.
	(GdbServer::rspReadReg, GdbServer::rspWriteReg): Do not treat
	program counter as special case and use ITarget methods to access
	registers.
	(GdbServer::rspCommand): Use ITarget reset method for "monitor
	reset".
	(GdbServer::rspVpkt): Do not handle 'v' packets for now.
	(GdbServer::rspWriteMemBin): Rewrite to use ITarget write method.
	(GdbServer::rspRemoveMatchpoint, GdbServer::rspInsertMatchpoint):
	Use reinterpret_cast instead of C style cast and use ITarget
	methods to read/write memory.
	* server/GdbServer.h: Include <inttypes.h> with STDC_FORMAT_MACROS.
	* targets/ITarget.h (class ITarget): Pass first argument to read
	and write methods by value, not reference.
	* targets/picorv32/Picorv32.cpp: Created.
	* targets/picorv32/Picorv32.h: Created.
	* targets/picorv32/Picorv32Impl.cpp: Renamed from ri5cy/Ri5cy.cpp.
	* targets/picorv32/Picorv32Impl.h: Renamed from ri5cy/Ri5cy.h.
	* targets/ri5cy/Ri5cy.cpp: Renamed as picorv32/Picorv32Impl.cpp.
	* targets/ri5cy/Ri5cy.h: Renamed as picorv32/Picorv32Impl.h.

2017-06-09  Jeremy Bennett  <jeremy.bennett@embecosm.com>

	WIP progress to integrated existing model into the GDB server
	target abstraction.

	* server/Cpu.cpp: Moved to targets/ri5cy/Ri5cy.cpp.
	* server/Cpu.h: Moved to targets/ri5cy/Ri5cy.h.
	* server/GdbServer.cpp: Use ITarget.h, not Cpu.h, add using
	statements from chrono components. Use timeout, not clock_timeout
	throughout and make signals of scoped enumeration type TargetSignal.
	(GdbServer::GdbServer): Change type of cpu to ITarget, and
	initialize timeout as a duration.
	(GdbServer::rspClientRequest): Replace code for 'c'.
	(operator<<): Created.
	* server/GdbServer.h: Relace ctime by chrono header
	(class GdbServer): Make cpu of class ITarget, make signals a
	scoped enumeration, make timeout a duration.
	* server/Makefile.am: Remove Cpu.c and Cpu.h from SOURCES, add
	libtargets as a library and all the target include directories.
	* server/Makefile.in: Regnerated.
	* server/RspConnection.cpp:
	(RspConnection::putRspChar, RspConnection::getRspChar): Rewrite to
	use raw versions of functions and test for break.
	(RspConnection::haveBreak, RspConnection::putRspCharRaw)
	(RspConnectionLinux::getRspCharRaw): Created.
	* server/RspConnection.h (class RspConnection): Add new methods
	and member variable sot support them.
	* server/main.cpp: Replace Cpu.h by all the target headers.
	* targets/ri5cy/Ri5cy.cpp: Moved to server/Cpu.cpp.
	* targets/ri5cy/Ri5cy.h: Moved to server/Cpu.h.

2017-06-08  Jeremy Bennett  <jeremy.bennett@embecosm.com>

	Restructure configure.ac to add a set of target specific options
	to locate verilator models and headers. We now have
	--with-verilator-headers
	--with-picorv32-modeldir
	--with-picorv32-topmodule
	--with-ri5cy-modeldir
	--with-ri5cy-topmodule

	For each new model, we add a new set of options.

	* Makefile.in: Regenerated.
	* config.h.in: Regenerated.
	* configure: Regenerated.
	* configure.ac: Remove --enable-32-bit, add --with-verilator-headers
	--with-picorv32-modeldir, --with-picorv32-topmodule,
	--with-ri5cy-modeldir, --with-ri5cy-topmodule, test for Verilator
	headers.
	* server/Makefile.in: Regenerated.
	* targets/Makefile.in: Regenerated.
	* targets/common/Makefile.in: Regenerated.
	* targets/picorv32/Makefile.in: Regenerated.
	* targets/ri5cy/Makefile.in: Regenerated.

2017-06-07  Jeremy Bennett  <jeremy.bennett@embecosm.com>

	Infrastructure for an abstracted target interface class, ITarget.
	All targets should implement the interface class ITarget, declared
	in the "targets" subdirectory.  Each target should be in its own
	subdirectory of the "targets" directory.  There is also a "common"
	subdirectory for code common to all targets.

	The result is the libtargets library, which can be linked into the
	server code, which can instantiate the target of choice.  The
	current framework has placeholders for the PicoRV32 and RI5CY
	verilator models.

	* Makefile.am: Add new subdirectories and have automake include
	the m4 directory.
	* Makefile.in: Regenerated.
	* aclocal.m4: Regenerated for libtool.
	* compile: Generated.
	* config.guess: Generated.
	* config.h.in: Regenerated.
	* config.sub: Generated.
	* configure: Regenerated.
	* configure.ac: Now use libtool and for now comment out the
	verilator directory.
	* ltmain.sh: Generated.
	* m4/libtool.m4: Generated.
	* m4/ltoptions.m4: Generated.
	* m4/ltsugar.m4: Generated.
	* m4/ltversion.m4: Generated.
	* m4/lt~obsolete.m4: Generated.
	* server/Makefile.in: Regenerated.
	* targets/ITarget.cpp: Created
	* targets/ITarget.h: Created
	* targets/Makefile.am: Created
	* targets/Makefile.in: Generated.
	* targets/common/Makefile.am: Created
	* targets/common/Makefile.in: Generated.
	* targets/common/SyscallInfo.cpp: Created
	* targets/common/SyscallInfo.h: Created
	* targets/picorv32/Makefile.am: Created
	* targets/picorv32/Makefile.in: Generated.
	* targets/ri5cy/Makefile.am: Created
	* targets/ri5cy/Makefile.in: Generated.

2017-06-07  Jeremy Bennett  <jeremy.bennett@embecosm.com>

	Add in the autotools generated files.  I know that there is a
	debate about whether to do this.  But we'll follow the GNU tool
	chain practice of doing so.  It means you can clone and build out
	of the box.

	* .gitignore: Created.
	* COPYING: Generated.
	* INSTALL: Generated.
	* Makefile.in: Generated.
	* aclocal.m4: Generated.
	* config.h.in: Generated.
	* configure: Generated.
	* depcomp: Generated.
	* install-sh: Generated.
	* missing: Generated.
	* server/Makefile.in: Generated.


2017-05-25  Ian Bolton  <ian.bolton@embecosm.com>

	* server/GdbServer.cpp: Handle monitor reset, and make vKill
	behave in the same way (delete cpu and construct another).

2017-05-21  Ian Bolton  <ian.bolton@embecosm.com>

	* server/GdbServer.cpp: Handle vKill packet, so that server
	is terminated when GDB session quits.
	* server/RspConnection.cpp: Don't output to stdout unless
	GDBSERVER_DEBUG is defined.

2017-05-20  Ian Bolton  <ian.bolton@embecosm.com>

	* README.md: Mention building outside source tree and also
	expand example GDB session to cover breakpoints.

2017-05-20  Ian Bolton  <ian.bolton@embecosm.com>

	* README.md: Update status to mention breakpoints working.
	* server/Cpu.cpp: Add clearTrapAndRestartInstruction to properly
	continue after a breakpoint has caused a trap.
	* server/Cpu.h: New clearTrapAndRestartInstruction function.
	* server/GdbServer.cpp: Make single instruction stepping call
	clearTrapAndRestartInstruction before doing the step.

2017-05-20  Ian Bolton  <ian.bolton@embecosm.com>

	* configure.ac: Define and use VTESTBENCH variable.
	* README.md: Updated build instructions.
	* server/Makefile.am: No longer hardcode object locations.

2017-05-16  Ian Bolton  <ian.bolton@embecosm.com>

	* server/GdbServer.cpp: Debug only shown when GDBSERVER_DEBUG defined.

2017-05-16  Ian Bolton  <ian.bolton@embecosm.com>

	* README.md: Updated the GDB example session section.
	* server/Cpu.cpp: Bring step function in line with what GDB expects, to
	execute a single instruction rather than just one clock step.
	* server/Cpu.h: Add clock_step function.

2017-05-16  Ian Bolton  <ian.bolton@embecosm.com>

	* README.md: Added example GDB session instructions.

2017-05-16  Ian Bolton  <ian.bolton@embecosm.com>

	* server/Cpu.cpp: Write PC for each step while in reset, so that it is set
	in the model once out of reset.
	* server/GdbServer.cpp: Print out when we are writing PC and then read the
	value back to confirm it was written.
	* server/main.cpp: Cycling during reset has been deferred until we attempt
	to write PC.

2017-05-15  Ian Bolton  <ian.bolton@embecosm.com>

	* server/Cpu.cpp: Detect inReset and trap situations and return bool from step.
	* server/Cpu.h: Add inReset and haveTrap, and return bool from step.
	* server/GdbServer.cpp: Handle 32-bit breakpoint instructions correctly.
	* server/GdbServer.h: Correct BREAK_INSTR to EBREAK instruction pattern.
	* server/MpHash.cpp: Correct instructions to be 32-bits.
	* server/MpHash.h: Likewise.
	* server/main.cpp: Cycle until CPU no longer in reset. Remove redundant command line arguments.

2017-05-15  Ian Bolton  <ian.bolton@embecosm.com>

	* server/Cpu.cpp: Fix spelling mistake in comment.
	* server/Cpu.h: Likewise.
	* server/GdbServer.cpp: Likewise.
	* server/GdbServer.h: Likewise.
	* server/main.cpp: Likewise.

2017-05-15  Ian Bolton  <ian.bolton@embecosm.com>

	* server/Cpu.cpp: Call into readReg, writeReg within CPU correctly.
	* server/GdbServer.cpp: Continue should step without reporting exception.

2017-05-15  Ian Bolton  <ian.bolton@embecosm.com>

	* server/GdbServer.cpp: Corrected RISCV_PC_REGNUM to be 32.

2017-05-15  Ian Bolton  <ian.bolton@embecosm.com>

	* README.md: Add -g flag to CXXFLAGS in example configure command.
	* server/GdbServer.cpp: Respond to vMustReplyEmpty.
	* server/main.cpp: Create the Cpu object.

2017-05-13  Ian Bolton  <ian.bolton@embecosm.com>

	* README.md: Added commands required to build.

2017-05-12  Ian Bolton  <ian.bolton@embecosm.com>

	* AUTHORS: Created.
	* configure.ac: Created.
	* Makefile.am: Created.
	* NEWS: Created.
	* README: Created as symbolic link to README.md.
	* README.md: Updated with a note about lack of doc directory.
	* server/Cpu.cpp: Created.
	* server/Cpu.h: Created.
	* server/GdbServer.cpp: Created.
	* server/GdbServer.h: Created.
	* server/main.cpp: Created.
	* server/Makefile.am: Created.
	* server/MpHash.cpp: Created.
	* server/MpHash.h: Created.
	* server/RspConnection.cpp: Created.
	* server/RspConnection.h: Created.
	* server/RspPacket.cpp: Created.
	* server/RspPacket.h: Created.
	* server/TraceFlags.cpp: Created.
	* server/TraceFlags.h: Created.
	* server/Utils.cpp: Created.
	* server/Utils.h: Created.

2017-05-12  Ian Bolton  <ian.bolton@embecosm.com>

	* ChangeLog: Created.
	* README.md: Created.
